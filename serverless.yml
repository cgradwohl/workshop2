service: workshop-${self:custom.name}

custom:
  name: cgradwohl
  email: christophergradwohl@gmail.com

plugins:
  - serverless-export-env
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x

  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: !GetAtt RestaurantsTable.Arn
      # NOTE:#1 here we configure an IAM POLICY which grants the user permission to call any GET method along the /srestaurants path
      # NOTE:#1 later, we use this lambda execution role to retrieve credentials from environment variables (AWS_SESSION_TOKEN, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY).
      # NOTE:#1 Finally, once we have the credentials from this lambda execution role, we use them to sign the request to the protected resource.
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:#{ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants

functions:
  get-index:
    environment:
      restaurants_api: https://#{ApiGatewayRestApi}.execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}/restaurants
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          # NOTE:#1 here we enabling an aws_iam authorizer function, which requires the users IAM access keys to sign the request
          authorizer:
            type: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable

resources:
  Resources:

    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn
    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient
    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient
